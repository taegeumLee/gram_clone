// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  phoneNumber String   @unique
  gender      String
  birthDate   DateTime
  location    String
  height      Int
  education   String
  job         String
  religion    String
  drinking    String
  smoking     String

  // 상태 관련 필드
  isActive   Boolean  @default(false)
  isVerified Boolean  @default(false)
  lastActive DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // 필수 관계
  photos       UserPhoto  @relation(fields: [userPhotoId], references: [id])
  userPhotoId  String
  preferences  Preference @relation(fields: [preferenceId], references: [id], onDelete: Cascade)
  preferenceId String

  // 선택적 관계
  userInterest   UserInterest? @relation(fields: [userInterestId], references: [id])
  userInterestId String?
  userFeature    UserFeature?  @relation(fields: [userFeatureId], references: [id])
  userFeatureId  String?

  @@map("users")
}

model UserPhoto {
  id     String  @id @default(uuid())
  users  User[]
  photos Photo[]

  @@map("user_photos")
}

model Photo {
  id        String   @id @default(uuid())
  url       String
  order     Int
  createdAt DateTime @default(now())

  userPhoto   UserPhoto? @relation(fields: [userPhotoId], references: [id])
  userPhotoId String?

  @@map("photos")
}

model UserInterest {
  id        String     @id @default(uuid())
  users     User[]
  interests Interest[]

  @@map("user_interests")
}

model Interest {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  userInterest   UserInterest? @relation(fields: [userInterestId], references: [id])
  userInterestId String?

  @@map("interests")
}

model UserFeature {
  id       String    @id @default(uuid())
  users    User[]
  features Feature[]

  @@map("user_features")
}

model Feature {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())

  userFeature   UserFeature? @relation(fields: [userFeatureId], references: [id])
  userFeatureId String?

  @@map("features")
}

model Preference {
  id             String @id @default(uuid())
  gender         String
  ageRangeMin    Int
  ageRangeMax    Int
  location       String
  distance       Int
  heightRangeMin Int
  heightRangeMax Int
  religion       String
  drinking       String
  smoking        String

  users User[]

  @@map("preferences")
}
